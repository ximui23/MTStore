import express from 'express'
import expressAsyncHandler from 'express-async-handler';
import bcrypt from 'bcryptjs'
import data from '../data.js';
import User from '../models/userModel.js';
import { generateToken } from '../utils.js';

const userRouter = express.Router();

//define get method for 'seed' api
userRouter.get('/seed', expressAsyncHandler(async (req, res) => {
    //remove all users when refresh the page
    //await User.remove({});
    //users from data.js from backend will be inserted into createdUser
    const createdUser = await User.insertMany(data.users);

    //send back createdUser
    res.send({ createdUser });
}));

//Sign in router
//final path is /api/user/signin
userRouter.post('/signin', expressAsyncHandler(async (req, res) => {
    //send AJAX request to check the user in user's database
    //compare email in the database with the email inside the body of this request
    const user = await User.findOne({ email: req.body.email });

    //if user exists
    if (user) {
        //checking password if the user's password is correct
        //compareSync is used to compare passwords between the password inside the body
        //of this request with the hash password 'user.password' from database
        if (bcrypt.compareSync(req.body.password, user.password)) {
            //if the password is correct, send the below info of user
            res.send({
                _id: user.id,
                name: user.name,
                email: user.email,
                isAdmin: user.isAdmin,
                token: generateToken(user)  //this token is generated by JSON web token - hash string
                // this token will be used this in the next request to authenticate this request
            });
            return;
        }
    }
    //if user does not exist, or user's password is not correct
    res.status(401).send({ message: 'Invalid email or password' });
}));

//Route for register
userRouter.post('/register', expressAsyncHandler(async (req, res) => {
    const user = User({
        name: req.body.name, email: req.body.email,
        password: bcrypt.hashSync(req.body.password, 8), //convert plain text password to hash password
        //req.body.password = real pass, 
    });
    //create new user and save it in createdUser
    const createdUser = await user.save();
    res.send({
        _id: createdUser.id,
        name: createdUser.name,
        email: createdUser.email,
        isAdmin: createdUser.isAdmin,
        token: generateToken(createdUser)
    });
}));

//Route for user details
userRouter.get('/:id', expressAsyncHandler(async (req, res) => {
    //from User model, find user by id from the request parameter
    const user = await User.findById(req.params.id);
    if (user) {
        res.send(user);
    }
    else {
        res.status(404).send({ message: 'User Not Found' });
    }
}));

export default userRouter;